import React, { createContext, useContext, useEffect, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { useToast } from '@/hooks/use-toast';
import { getLinks, saveLinks, Link as LinkType } from '../services/linkService';

// Тип для ссылки
export interface Link {
  id: string;
  url: string;
  title: string;
  description?: string;
  tags?: string[];
  createdAt: string;
}

// Тип для контекста ссылок
export interface LinkContextType {
  links: Link[];
  addLink: (link: Omit<Link, 'id' | 'createdAt'>) => void;
  removeLink: (id: string) => void;
  updateLink: (id: string, link: Partial<Omit<Link, 'id' | 'createdAt'>>) => void;
}

// Создаем контекст
export const LinkContext = createContext<LinkContextType | null>(null);

export const LinkProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [links, setLinks] = useState<LinkType[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  // Загрузка ссылок с сервера при монтировании компонента
  useEffect(() => {
    const fetchLinks = async () => {
      try {
        setLoading(true);
        const data = await getLinks();
        setLinks(data);
      } catch (error) {
        console.error('Failed to fetch links:', error);
        toast({
          title: 'Ошибка',
          description: 'Не удалось загрузить ссылки с сервера',
          variant: 'destructive',
        });
      } finally {
        setLoading(false);
      }
    };
    
    fetchLinks();
  }, []);

  // Сохранение ссылок на сервере при их изменении
  useEffect(() => {
    if (!loading) {  // Предотвращаем сохранение при инициализации
      saveLinks(links).catch(error => {
        console.error('Failed to save links:', error);
        toast({
          title: 'Ошибка',
          description: 'Не удалось сохранить ссылки на сервере',
          variant: 'destructive',
        });
      });
    }
  }, [links]);

  // Функция для добавления новой ссылки
  const addLink = (link: Omit<Link, 'id' | 'createdAt'>) => {
    const newLink: Link = {
      id: uuidv4(),
      createdAt: new Date().toISOString(),
      ...link,
    };
    setLinks([...links, newLink]);
    toast({
      title: 'Успех',
      description: 'Ссылка добавлена',
    });
  };

  // Функция для удаления ссылки
  const removeLink = (id: string) => {
    setLinks(links.filter((link) => link.id !== id));
    toast({
      title: 'Успех',
      description: 'Ссылка удалена',
    });
  };

  // Функция для обновления ссылки
  const updateLink = (id: string, link: Partial<Omit<Link, 'id' | 'createdAt'>>) => {
    setLinks(
      links.map((existingLink) =>
        existingLink.id === id ? { ...existingLink, ...link } : existingLink
      )
    );
    toast({
      title: 'Успех',
      description: 'Ссылка обновлена',
    });
  };

  return (
    <LinkContext.Provider value={{
      links,
      loading,
      addLink,
      removeLink,
      updateLink,
    }}>
      {children}
    </LinkContext.Provider>
  );
};

// Хук для использования контекста ссылок
export const useLinkContext = () => {
  const context = useContext(LinkContext);
  if (!context) {
    throw new Error('useLinkContext должен использоваться внутри LinkProvider');
  }
  return context;
};
